#!/usr/bin/env node
var config  = require('../config/config');
var server  = require('../app/lib/server');
var http    = require('http');
var program = require('commander');

function keys (val) {
  return val.split(',');
}

program
  .version('0.0.7')
  .option('-p, --port <port>', 'Port to listen for requests', parseInt)
  .option('-k, --initKeys <keylist>', 'List of public key pathes, comma separated.', keys)
  .option('-c, --currency <name>', 'Name of the currency managed by this node.')
  .option('--mhost <host>', 'MongoDB host.')
  .option('--mport <port>', 'MongoDB port.')
  .option('--mdb <name>', 'MongoDB database name.')
  .option('--pgpkey <keyPath>', 'Path to the private key used for signing HTTP responses.')
  .option('--pgppasswd <password>', 'Password for the key provided with --httpgp-key option.')
  .option('--ipv4 <address>', 'IPV4 interface to listen for requests')
  .option('--ipv6 <address>', 'IPV6 interface to listen for requests')
  .parse(process.argv);

config.server.port         = program.port || config.server.port;
config.server.ipv4address  = program.ipv4 || config.server.ipv4address;
config.server.ipv6address  = program.ipv6 || config.server.ipv6address;
config.server.pgp.key      = program.pgpkey || config.server.pgp.key;
config.server.pgp.password = program.pgppasswd || config.server.pgp.password;
config.db.host             = program.mhost || config.db.host;
config.db.port             = program.mport || config.db.port;
config.db.database         = program.mdb || config.db.database;
config.currency.name       = program.currency || config.currency.name;

// Set init keys
config.initKeys = [];
program.initKeys = program.initKeys || [];
for(var i in program.initKeys){
  config.initKeys.push({path: program.initKeys[i]});
}

server.express.app(config, function (err, app) {
  if(!config.server.ipv4address){
    http.createServer(app).listen(app.get('port'), function(){
      console.log('uCoin server listening on port ' + app.get('port'));
      console.log("Currency name: " + app.get('config').currency.name);
    });
  }

  if(config.server.ipv4address){
    http.createServer(app).listen(app.get('port'), config.server.ipv4address, function(){
      console.log('uCoin server listening on ' + config.server.ipv4address + ' port ' + app.get('port'));
    });
  }

  if(config.server.ipv6address){
    http.createServer(app).listen(app.get('port'), config.server.ipv6address, function(){
      console.log('uCoin server listening on ' + config.server.ipv6address + ' port ' + app.get('port'));
    });
  }
});
