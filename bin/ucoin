#!/usr/bin/env node
var server   = require('../app/lib/server');
var http     = require('http');
var fs       = require('fs');
var program  = require('commander');
var mongoose = require('mongoose');

function keys (val) {
  return val.split(',');
}

program
  .version('0.0.8')
  .option('-p, --port <port>', 'Port to listen for requests', parseInt)
  .option('-c, --currency <name>', 'Name of the currency managed by this node.')
  .option('-C, --config <name>', 'Name of the currency to configure.')
  .option('--mhost <host>', 'MongoDB host.')
  .option('--mport <port>', 'MongoDB port.')
  .option('--pgpkey <keyPath>', 'Path to the private key used for signing HTTP responses.')
  .option('--pgppasswd <password>', 'Password for the key provided with --httpgp-key option.')
  .option('--ipv4 <address>', 'IPV4 interface to listen for requests')
  .option('--ipv6 <address>', 'IPV6 interface to listen for requests')
  .parse(process.argv);

var config = {
  server: {
    port: program.port,
    ipv4address: program.ipv4,
    ipv6address: program.ipv6,
    pgp: {
      key: program.pgpkey,
      password: program.pgppasswd
    }
  },
  db: {
    host: program.mhost,
    port: program.mport,
    database: program.mdb,
  }
};

if(!program.currency && !program.config){
  console.error("Either precise --currency or --config parameter.\nCurrency name is mandatory.");
  return;
}

var currency = program.currency || program.config;

// Connecting to DB
server.database.connect(currency, config.db.host, config.db.port, function (err, conf) {

  if(err){
    console.log("Error connecting to DB: " + err);
    server.database.disconnect();
    return;
  }

  // Update conf
  if(config.server.pgp.key) config.server.pgp.key = fs.readFileSync(config.server.pgp.key, 'utf8');
  conf.ipv4      = config.server.ipv4address || conf.ipv4;
  conf.ipv6      = config.server.ipv6address || conf.ipv6;
  conf.port      = config.server.port || conf.port;
  conf.pgpkey    = config.server.pgp.key || conf.pgpkey;
  conf.pgppasswd = config.server.pgp.password || conf.pgppasswd;

  conf.save(function (err) {

    if(err){
      console.error("Configuration could not be saved: " + err);
      server.database.disconnect();
      return;
    }

    if(program.config){
      console.log("Configuration saved.");
      server.database.disconnect();
      return;
    }

    if(program.currency){

      // Launching server
      server.express.app(config, function (err, app) {

        if(conf.ipv4){
          http.createServer(app).listen(conf.port, conf.ipv4, function(){
            console.log('uCoin server listening on ' + conf.ipv4 + ' port ' + conf.port);
          });
        }

        if(conf.ipv6){
          http.createServer(app).listen(conf.port, conf.ipv6, function(){
            console.log('uCoin server listening on ' + conf.ipv6 + ' port ' + conf.port);
          });
        }

        if(!conf.ipv4 && !conf.ipv6){
          console.error("No interface to listen to. Relaunch with --config and eith --ipv4 or --ipv6 parameters.");
        }
      });
    }
  });

});
