#!/usr/bin/env node
"use strict";

if (!~process.execArgv.indexOf('--harmony')) {
  throw Error('This version requires --harmony flag. Use \'node --harmony\' instead of just \'node\'.');
}

var async       = require('async');
var co          = require('co');
var Q           = require('q');
var _           = require('underscore');
var program     = require('commander');
var vucoin      = require('vucoin');
var wizard      = require('../app/lib/wizard');
var multicaster = require('../app/lib/streams/multicaster');
var logger      = require('../app/lib/logger')('ucoind');
var signature   = require('../app/lib/signature');
var crypto      = require('../app/lib/crypto');
var base58      = require('../app/lib/base58');
var constants   = require('../app/lib/constants');
var Synchroniser = require('../app/lib/sync');
var bma         = require('../app/lib/streams/bma');
var upnp        = require('../app/lib/upnp');
var pjson       = require('../package.json');
var ucoin       = require('./../index');
var Peer        = require('../app/lib/entity/peer');
var Block       = require('../app/lib/entity/block');

function keys (val) {
  return val.split(',');
}

const INTERACTIVE_SYNC = true;
const ERASE_IF_ALREADY_RECORDED = true;
const NO_LOGS = true;

program
  .version(pjson.version)
  .usage('<command> [options]')
  .option('-p, --port <port>',         'Port to listen for requests', parseInt)
  .option('-c, --currency <name>',     'Name of the currency managed by this node.')
  .option('-d, --mdb <name>',          'Database name (defaults to "ucoin_default").')
  .option('--salt <salt>',             'Key salt to generate this key\'s secret key')
  .option('--passwd <password>',       'Password to generate this key\'s secret key')
  .option('--ipv4 <address>',          'IPv4 interface to listen for requests')
  .option('--ipv6 <address>',          'IPv6 interface to listen for requests')
  .option('--remoteh <host>',          'Remote interface others may use to contact this node')
  .option('--remote4 <host>',          'Remote interface for IPv4 access')
  .option('--remote6 <host>',          'Remote interface for IPv6 access')
  .option('--remotep <port>',          'Remote port others may use to contact this node')
  .option('--sigDelay <timestamp>',    'Minimum delay between 2 similar certifications, in seconds.')
  .option('--sigValidity <timestamp>', 'Validity duration of a certification, in seconds.')
  .option('--msValidity <timestamp>',  'Validity duration of a memberships, in seconds.')
  .option('--sigQty <number>',         'Minimum number of required certifications to be a member/stay as a member')
  .option('--medtblocks <number>',     'medianTimeBlocks parameter of UCP')
  .option('--avgGenTime <number>',     'avgGenTime parameter of UCP')
  .option('--dtdiffeval <number>',     'dtDiffEval parameter of UCP')
  .option('--powZeroMin <number>',     'Minimum number of leading zeros for a proof-of-work')
  .option('--powPeriod <number>',      'Number of blocks to wait to decrease proof-of-work difficulty by one')
  .option('--powDelay <number>',       'Number of seconds to wait before starting the computation of next block')
  .option('--participate <Y|N>',       'Participate to writing the blockchain')
  .option('--upnp',                    'Use UPnP to open remote port')
  .option('--noupnp',                  'Do not use UPnP to open remote port')
  .option('--growth <number>',         'Universal Dividend %growth. Aka. \'c\' parameter in RTM', parsePercent)
  .option('--ud0 <number>',            'Universal Dividend initial value')
  .option('--dt <number>',             'Number of seconds between two UD')
  .option('--udid2',                   'Enable udid2 format for user id')
  .option('--rootoffset <number>',     'Allow to give a time offset for first block (offset in the past)')
  .option('--cpu <percent>',           'Percent of CPU usage for proof-of-work computation', parsePercent)
  .option('--timeout <milliseconds>',  'Timeout to use when contacting peers', parseInt)
  .option('--show',                    'With gen-next or gen-root commands, displays the generated block')
  .option('--member',                  'With `bootstrap` command, ensures we have a member keypair')
  .option('--httplogs',                'Enable HTTP logs')
  .option('--nohttplogs',              'Disable HTTP logs')
  .option('--nointeractive',           'Disable interactive sync UI')
  .option('--nocautious',              'Do not check blocks validity during sync')
  .option('--cautious',                'Check blocks validity during sync (overrides --nocautious option)')
  .option('--nopeers',                 'Do not retrieve peers during sync')
  .option('--isolate',                 'Avoid the node to send peering or status informations to the network')
  .option('--check',                   'With gen-next: just check validity of generated block')
  .option('--forksize <size>',         'Maximum size of fork window', parseInt)
  .option('--memory',                  'Memory mode')
  .option('--autoconf',                'With `init` command, will guess the best network and key options witout aksing for confirmation')
  ;

program
  .command('start')
  .description('Start uCoin server.')
  .action(service(serverStart));

program
  .command('wizard [step]')
  .description('Launch the configuration Wizard')
  .action(function (step) {
    // Only show message "Saved"
    require('log4js').configure({
      "appenders": [{
        category: "ucoind",
        type: "console"
      }]
    });
    connect(function(step, server, conf){
      async.series([
        function(next) {
          startWizard(step, server, conf, next);
        }
      ], logIfErrorAndExit(server));
    })(step, null);
  });

program
  .command('sync [host] [port] [to]')
  .description('Synchronize blockchain from a remote uCoin node')
  .action(service(function (host, port, to, server, conf) {
    if (!host) {
      throw 'Host is required.';
    }
    if (!port) {
      throw 'Port is required.';
    }
    sync(server, host, port, conf, to)
      .then(function(){
        logger.info('Sync finished.');
      })
      .catch(function(err){
        err && console.error(err.stack || err.message);
      })
      .then(function(){
        return ((server && server.disconnect()) || Q()).catch(() => null);
      })
      .then(function(){
        process.exit();
      });
  }));

function sync(server, host, port, conf, to) {
  // Synchronize
  var remote = new Synchroniser(server, host, port, conf, !program.nointeractive);
  let cautious;
  if (program.nocautious) {
    cautious = false;
  }
  if (program.cautious) {
    cautious = true;
  }
  return remote.sync(parseInt(to), cautious, program.nopeers);
}

program
  .command('peer [host] [port]')
  .description('Exchange peerings with another node')
  .action(service(function(host, port, server) {
    return co(function *() {
      let node = yield Q.nfcall(vucoin, host, port);
      logger.info('Fetching peering record at %s:%s...', host, port);
      let peering = yield Q.nfcall(node.network.peering.get);
      logger.info('Apply peering ...');
      yield server.PeeringService.submitP(peering, ERASE_IF_ALREADY_RECORDED, !program.nocautious);
      logger.info('Applied');
      let selfPeer = yield server.dal.getPeer(server.PeeringService.pubkey);
      if (!selfPeer) {
        yield Q.nfcall(server.PeeringService.generateSelfPeer, server.conf, 0);
        selfPeer = yield server.dal.getPeer(server.PeeringService.pubkey);
      }
      logger.info('Send self peering ...');
      var caster = multicaster();
      yield Q.nfcall(caster.sendPeering, Peer.statics.peerize(peering), Peer.statics.peerize(selfPeer));
      logger.info('Sent.');
      yield server.disconnect();
      process.exit();
    })
      .catch(function(err){
        logger.error(err.code || err.message || err);
        process.exit();
      });
  }));

program
  .command('init [host] [port]')
  .description('Setup a node configuration and sync data with given node')
  .action(connect(bootstrapServer, true, true));

program
  .command('forward [host] [port] [to]')
  .description('Forward local blockchain to a remote uCoin node')
  .action(service(function (host, port, to, server) {

    var remoteCurrent;
    async.waterfall([
      function(next) {
        vucoin(host, port, next, { timeout: server.conf.timeout });
      },
      function (node, next) {
        node.blockchain.current(next);
      },
      function(current, next) {
        remoteCurrent = current;
        console.log(remoteCurrent.number);
        server.dal.getBlockFrom(remoteCurrent.number - 10).then(_.partial(next, null)).catch(next);
      },
      function (blocks, next){
        blocks = _.sortBy(blocks, 'number');
        // Forward
        var peer = new Peer({
          endpoints: [['BASIC_MERKLED_API', host, port].join(' ')]
        });
        async.forEachSeries(blocks, function (block, callback) {
          logger.info("Forwarding block#" + block.number);
          server.dal.getBlock(block.number)
            .then(function(fullBlock){
              multicaster(server.conf.isolate).sendBlock(peer, new Block(fullBlock), callback);
            });
        }, next);
      }
    ], function (err) {
      if(err){
        logger.error('Error during forwarding:', err);
      }
      server.disconnect();
      process.exit();
    });
  }));

program
  .command('revert [count]')
  .description('Revert (undo + remove) the top [count] blocks from the blockchain. EXPERIMENTAL')
  .action(service(function (count, server) {
    co(function *() {
      try {
        for (let i = 0; i < count; i++) {
          yield server.revert();
        }
      } catch (err) {
        logger.error('Error during revert:', err);
      }
      // Save DB
      server.disconnect()
        .catch(() => null)
        .then(function(){
          process.exit();
        });
    });
  }));

program
  .command('revert-to [number]')
  .description('Revert (undo + remove) top blockchain blocks until block #[number] is reached. EXPERIMENTAL')
  .action(service(function (number, server) {
    co(function *() {
      try {
        yield server.revertTo(number);
      } catch (err) {
        logger.error('Error during revert:', err);
      }
      // Save DB
      ((server && server.disconnect()) || Q())
        .catch(() => null)
        .then(function(){
          process.exit();
        });
    });
  }));

program
  .command('gen-next [host] [port] [diff]')
  .description('Tries to generate the next block of the blockchain')
  .action(service(generateAndSend("generateNext")));

program
  .command('gen-root [host] [port] [diff]')
  .description('Tries to generate root block, with choice of root members')
  .action(service(generateAndSend("generateManualRoot")));

function generateAndSend (generationMethod) {
  return function (host, port, difficulty, server, conf) {
    async.waterfall([
      function (next){
        var method = eval('server.BlockchainService.' + generationMethod);
        method().then(_.partial(next, null)).catch(next);
      },
      function (block, next){
        if (program.check) {
          block.time = block.medianTime;
          program.show && console.log(block.getRawSigned());
          server.checkBlock(block)
            .then(function(){
              logger.info('Acceptable block');
              next();
            })
            .catch(next);
        }
        else {
          logger.debug('Block to be sent: %s', block.quickDescription());
          var wiz = wizard(server);
          var doSign = null;
          async.waterfall([
            function (next){
              if (!conf.salt && !conf.passwd)
                wiz.configKey(conf, next);
              else
                next();
            },
            function (next){
              // Extract key pair
              crypto.getKeyPair(conf.passwd, conf.salt, next);
            },
            function (pair, next){
              signature.sync(pair, function(err, sigFunc) {
                doSign = sigFunc;
                next(err, pair);
              });
            },
            function (pair, next){
              proveAndSend(server, block, doSign, base58.encode(pair.publicKey), difficulty, host, port, next);
            }
          ], next);
        }
      }
    ], logIfErrorAndExit(server));
  };
}

function proveAndSend (server, block, sigFunc, issuer, difficulty, host, port, done) {
  var BlockchainService = server.BlockchainService;
  async.waterfall([
    function (next){
      block.issuer = issuer;
      program.show && console.log(block.getRawSigned());
      BlockchainService.prove(block, sigFunc, difficulty, next);
    },
    function (block, next){
      var peer = new Peer({
        endpoints: [['BASIC_MERKLED_API', host, port].join(' ')]
      });
      program.show && console.log(block.getRawSigned());
      logger.info('Posted block ' + block.quickDescription());
      multicaster(server.conf.isolate).sendBlock(peer, block, next);
    }
  ], done);
}

program
  .command('export-bc [upto]')
  .description('Exports the whole blockchain as JSON array, up to [upto] block number (excluded).')
  .action(service(function (upto, server) {
    return co(function *() {
      let CHUNK_SIZE = 500;
      let jsoned = [];
      let current = yield server.dal.getCurrentBlockOrNull();
      let lastNumber = current ? current.number + 1 : -1;
      if (upto !== undefined && upto.match(/\d+/)) {
        lastNumber = Math.min(parseInt(upto), lastNumber);
      }
      let chunksCount = Math.floor(lastNumber / CHUNK_SIZE);
      let chunks = [];
      // Max-size chunks
      for (let i = 0, len = chunksCount; i < len; i++) {
        chunks.push({ start: i * CHUNK_SIZE, to: i * CHUNK_SIZE + CHUNK_SIZE - 1 });
      }
      // A last chunk
      if (lastNumber > chunksCount * CHUNK_SIZE) {
        chunks.push({ start: chunksCount * CHUNK_SIZE, to: lastNumber });
      }
      for (let j = 0, len = chunks.length; j < len; j++) {
        let chunk = chunks[j];
        let blocks = yield server.dal.getBlocksBetween(chunk.start, chunk.to);
        blocks.forEach(function (block) {
          jsoned.push(_(new Block(block).json()).omit('raw'));
        });
      }
      console.log(JSON.stringify(jsoned, null, "  "));
      yield server.disconnect();
      process.exit();
    })
      .catch(function(err) {
        logger.warn(err.message || err);
        server.disconnect()
          .catch(() => null)
          .then(function(){
            process.exit();
          });
      });
  }, NO_LOGS));

program
  .command('check-config')
  .description('Checks the node\'s configuration')
  .action(service(function (server) {
    server.checkConfig()
      .then(function () {
        logger.warn('Configuration seems correct.');
        server.disconnect();
        process.exit();
      })
      .catch(function(err) {
        logger.warn(err.message || err);
        server.disconnect();
        process.exit();
      });
  }));

program
  .command('config')
  .description('Register configuration in database')
  .action(connect(function (server, conf) {
    return server.dal.saveConf(conf)
      .then(function() {
        logger.debug("Configuration saved.");
        server.disconnect();
        process.exit();
      })
      .catch(function(err) {
        logger.error("Configuration could not be saved: " + err);
        server.disconnect();
        process.exit();
      });
  }, true));

program
  .command('reset [config|data|peers|tx|stats|all]')
  .description('Reset configuration, data, peers, transactions or everything in the database')
  .action((type) => {
    let init = type != 'peers' ? connect : service;
    init(function (server) {
      if(!~['config', 'data', 'peers', 'tx', 'stats', 'all'].indexOf(type)){
        logger.error('Bad command: usage `reset config`, `reset data`, `reset peers`, `reset tx`, `reset stats` or `reset all`');
        server.disconnect();
        return;
      }
      if(type == 'data'){
        server.resetData(resetDone(server, 'Data successfully reseted.'));
      }
      if(type == 'peers'){
        server.resetPeers(resetDone(server, 'Peers successfully reseted.'));
      }
      if(type == 'tx'){
        server.resetTxs(resetDone(server, 'Transactions successfully reseted.'));
      }
      if(type == 'stats'){
        server.resetStats(resetDone(server, 'Stats successfully reseted.'));
      }
      if(type == 'config'){
        server.resetConf(resetDone(server, 'Configuration successfully reseted.'));
      }
      if(type == 'all'){
        server.reset(resetDone(server, 'Data & Configuration successfully reseted.'));
      }
    }, type != 'peers')(type);
  });

function resetDone(server, msg) {
  return function(err) {
    if(err)
      logger.error(err);
    else
      logger.warn(msg);
    server.disconnect();
    process.exit();
  }
}

function serverStart(server, conf) {

  if (conf.udid2) {
    // UserID must match udid2 format
    constants.setUDID2Format();
  }

  return co(function *() {
    // Enabling HTTP
    yield bma(server, null, conf.httplogs);
    // Enabling Routing
    if (server.conf.routing) {
      server
        // The router asks for multicasting of documents
        .pipe(server.router())
        // The documents get sent to peers
        .pipe(multicaster(server.conf.isolate))
        // The multicaster may answer 'unreachable peer'
        .pipe(server.router());
    }
    // Enabling UPnP
    if (conf.upnp) {
      yield upnp(server.conf.port, server.conf.remoteport)
        .catch(function(err){
          logger.warn(err);
        });
    }
    if (conf.participate) {
      server.startBlockComputation();
    }
    // Launching server
    server.start();
    logger.info('Server ready!');
  })
    .catch((err) => {
      logger.error(err);
      server.disconnect();
      process.exit();
    });
}

function startWizard(step, server, conf, done) {
  var wiz = wizard(server);
  var task = {
    'currency': wiz.configCurrency,
    'basic': wiz.configBasic,
    'pow': wiz.configPoW,
    'network': wiz.configNetwork,
    'network-reconfigure': wiz.configNetworkReconfigure,
    'key': wiz.configKey,
    'ucp': wiz.configUCP
  };
  var wizDo = task[step] || wiz.configAll;
  async.waterfall([
    function (next){
      wizDo(conf, next);
    },
    function (next){
      return server.dal.saveConf(conf)
        .then(function() {
          logger.debug("Configuration saved.");
          next();
        })
        .catch(next);
    },
    function (next) {
      // Check config
      service(function (key, server, conf) {
        next();
      })(null, null);
    }
  ], done);
}

function bootstrapServer(host, port, server, conf) {
  async.series(getBootstrapOperations(host, port, server, conf), function (err) {
    if (err) {
      logger.error(err);
    }
    server.disconnect();
    process.exit();
  });
}

function getBootstrapOperations(host, port, server, conf) {
  var ops = [];
  var wiz = wizard(server);
  ops = ops.concat([
    function(next) {
      // Reset data
      server.reset(next);
    },
    function(next) {
      conf.upnp = !program.noupnp;
      wiz.networkReconfiguration(conf, program.autoconf, program.noupnp, next);
    },
    function(next) {
      // PublicKey
      var keyChosen = true;
      async.doWhilst(function(next){
        async.waterfall([
          function(next) {
            if (!program.member && !conf.salt && !conf.passwd) {
              if (program.autoconf) {
                conf.salt = ~~(Math.random() * 2147483647) + "";
                conf.passwd = ~~(Math.random() * 2147483647) + "";
                return next();
              }
              wiz.choose('You need a keypair to identify your node on the network. Would you like to automatically generate it?', true,
                function(){
                  conf.salt = ~~(Math.random() * 2147483647) + "";
                  conf.passwd = ~~(Math.random() * 2147483647) + "";
                  next();
                },
                function(){
                  startWizard("key", server, conf, next);
                });
            } else if(program.member) {
              async.waterfall([
                function(next) {
                  async.parallel({
                    node: function(callback){
                      vucoin(host, port, callback, { timeout: server.conf.timeout });
                    },
                    keys: function(callback){
                      crypto.getKeyPair(conf.passwd, conf.salt, callback);
                    }
                  }, next);
                },
                function(res, next) {
                  var node = res.node;
                  var keys = res.keys;
                  // Look for existing member with this key
                  node.wot.certifiersOf(base58.encode(keys.publicKey), function(err) {
                    next(null, !err);
                  });
                },
                function(matchesMember, next) {
                  if (!matchesMember){
                    wiz.choose('Your key does not match an existing member. Retry?', true,
                      function(){
                        keyChosen = false;
                        startWizard("key", server, conf, next);
                      },
                      function(){
                        logger.warn('This node will not be able to compute blocks.');
                        next();
                      });
                  } else {
                    keyChosen = true;
                    next();
                  }
                }
              ], next);
            } else {
              next();
            }
          }
        ], next);
      }, function(){
        return !keyChosen;
      }, next);
    },
    function(next) {
      return server.dal.saveConf(conf).then(_.partial(next, null)).catch(next);
    }]);
  ops.push(function (next){
    logger.info('Configuration saved.');
    next();
  });
  return ops;
}

function commandLineConf(conf) {

  conf = conf || {};
  conf.sync = conf.sync || {};
  var cli = {
    currency: program.currency,
    cpu: program.cpu,
    server: {
      port: program.port,
      ipv4address: program.ipv4,
      ipv6address: program.ipv6,
      salt: program.salt,
      passwd: program.passwd,
      remote: {
        host: program.remoteh,
        ipv4: program.remote4,
        ipv6: program.remote6,
        port: program.remotep
      }
    },
    db: {
      mport: program.mport,
      mdb: program.mdb
    },
    net: {
      upnp:          program.upnp,
      noupnp:        program.noupnp
    },
    logs: {
      http:          program.httplogs,
      nohttp:        program.nohttplogs
    },
    ucp: {
      rootoffset:  program.rootoffset,
      sigDelay:    program.sigDelay,
      sigValidity: program.sigValidity,
      sigQty:      program.sigQty,
      msValidity:  program.msValidity,
      powZeroMin:  program.powZeroMin,
      powPeriod:   program.powPeriod,
      powDelay:    program.powDelay,
      participate: program.participate,
      ud0:         program.ud0,
      c:           program.growth,
      dt:          program.dt,
      udid2:       program.udid2,
      incDateMin:  program.incDateMin,
      medtblocks:  program.medtblocks,
      dtdiffeval:  program.dtdiffeval,
      avgGenTime:  program.avgGenTime
    },
    isolate: program.isolate,
    forksize: program.forksize,
    nofork: program.nofork,
    timeout: program.timeout
  };

  // Update conf
  if (cli.currency)                         conf.currency       = cli.currency;
  if (cli.server.ipv4address)               conf.ipv4           = cli.server.ipv4address;
  if (cli.server.ipv6address)               conf.ipv6           = cli.server.ipv6address;
  if (cli.server.port)                      conf.port           = cli.server.port;
  if (cli.server.salt)                      conf.salt           = cli.server.salt;
  if (cli.server.passwd != undefined)       conf.passwd         = cli.server.passwd;
  if (cli.server.remote.host != undefined)  conf.remotehost     = cli.server.remote.host;
  if (cli.server.remote.ipv4 != undefined)  conf.remoteipv4     = cli.server.remote.ipv4;
  if (cli.server.remote.ipv6 != undefined)  conf.remoteipv6     = cli.server.remote.ipv6;
  if (cli.server.remote.port != undefined)  conf.remoteport     = cli.server.remote.port;
  if (cli.ucp.rootoffset)                   conf.rootoffset     = cli.ucp.rootoffset;
  if (cli.ucp.sigDelay)                     conf.sigDelay       = cli.ucp.sigDelay;
  if (cli.ucp.sigValidity)                  conf.sigValidity    = cli.ucp.sigValidity;
  if (cli.ucp.msValidity)                   conf.msValidity     = cli.ucp.msValidity;
  if (cli.ucp.sigQty)                       conf.sigQty         = cli.ucp.sigQty;
  if (cli.ucp.msValidity)                   conf.msValidity     = cli.ucp.msValidity;
  if (cli.ucp.powZeroMin)                   conf.powZeroMin     = cli.ucp.powZeroMin;
  if (cli.ucp.powPeriod)                    conf.powPeriod      = cli.ucp.powPeriod;
  if (cli.ucp.powDelay)                     conf.powDelay       = cli.ucp.powDelay;
  if (cli.ucp.participate)                  conf.participate    = cli.ucp.participate == 'Y';
  if (cli.ucp.dt)                           conf.dt             = cli.ucp.dt;
  if (cli.ucp.c)                            conf.c              = cli.ucp.c;
  if (cli.ucp.ud0)                          conf.ud0            = cli.ucp.ud0;
  if (cli.ucp.udid2)                        conf.udid2          = cli.ucp.udid2;
  if (cli.ucp.incDateMin)                   conf.incDateMin     = cli.ucp.incDateMin;
  if (cli.ucp.medtblocks)                   conf.medianTimeBlocks = cli.ucp.medtblocks;
  if (cli.ucp.avgGenTime)                   conf.avgGenTime     = cli.ucp.avgGenTime;
  if (cli.ucp.dtdiffeval)                   conf.dtDiffEval     = cli.ucp.dtdiffeval;
  if (cli.net.upnp)                         conf.upnp           = true;
  if (cli.net.noupnp)                       conf.upnp           = false;
  if (cli.cpu)                              conf.cpu            = Math.max(0.01, Math.min(1.0, cli.cpu));
  if (cli.logs.http)                        conf.httplogs       = true;
  if (cli.logs.nohttp)                      conf.httplogs       = false;
  if (cli.db.mport)                         conf.mport          = cli.db.mport;
  if (cli.db.mdb)                           conf.mdb            = cli.db.mdb;
  if (cli.isolate)                          conf.isolate        = cli.isolate;
  if (cli.timeout)                          conf.timeout        = cli.timeout;
  if (cli.forksize != null)                 conf.branchesWindowSize = cli.forksize;

  // Specific internal settings
  conf.createNext = true;
  return _(conf).extend({ routing: true });
}

function connect(callback, forConf, useDefaultConf) {
  return function () {
    var cbArgs = arguments;
    var dbName = program.mdb || "ucoin_default";

    var server = ucoin({ name: dbName }, commandLineConf());

    // Initialize server (db connection, ...)
    server.connectDB(forConf, useDefaultConf)
      .then(function(){
        cbArgs.length--;
        cbArgs[cbArgs.length++] = server;
        cbArgs[cbArgs.length++] = server.conf;
        callback.apply(this, cbArgs);
      })
      .catch(function(err){
        logger.error(err);
        server.disconnect();
        process.exit();
      });

    // If ever the process gets interrupted
    let isSaving = false;
    process.on('SIGINT', function() {
      if (!isSaving) {
        isSaving = true;
        if (server.dal && server.dal.needsSave()) {
          logger.info('Saving DB and close...');
        }
        // Save DB
        server.disconnect()
          .catch(() => null)
          .then(function(){
            process.exit();
          });
      }
    });
  };
}

function service(callback, nologs) {

  if (nologs) {
    // Disable logs
    require('log4js').configure({
      "appenders": [
      ]
    });
  }
  return function () {
    var cbArgs = arguments;
    var dbName = program.mdb || "ucoin_default";

    var server = ucoin({ name: dbName, memory: program.memory }, commandLineConf());

    // Initialize server (db connection, ...)
    server.initWithServices()
      .then(function(){
        cbArgs.length--;
        cbArgs[cbArgs.length++] = server;
        cbArgs[cbArgs.length++] = server.conf;
        callback.apply(this, cbArgs);
      })
      .catch(function(err){
        logger.error(err);
        server.disconnect();
        process.exit();
      });

    // If ever the process gets interrupted
    let isSaving = false;
    process.on('SIGINT', function() {
      if (!isSaving) {
        isSaving = true;
        if (server.dal && server.dal.needsSave()) {
          logger.info('Saving DB and close...');
        }
        // Save DB
        ((server && server.disconnect()) || Q())
          .catch(() => null)
          .then(function(){
            process.exit();
          });
      }
    });
  };
}

function exit (server) {
  server.disconnect();
  process.exit();
}

function logIfErrorAndExit (server, prefix) {
  return function (err) {
    err && logger.error((prefix ? prefix : "") + (err.message || err));
    server.disconnect();
    process.exit();
  };
}

function parsePercent(s) {
  var f = parseFloat(s);
  return isNaN(f) ? 0 : f;
}

program
  .on('*', function(cmd) {
    console.log("Unknown command '%s'. Try --help for a listing of commands & options.", cmd);
    process.exit();
  });

program.parse(process.argv);

if (program.args.length == 0) {
  program.help();
  process.exit();
}
